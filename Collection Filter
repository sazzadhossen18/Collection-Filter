<section class="drawer" id="drawer-name" data-drawer-target>
  <div class="drawer__overlay" data-drawer-close tabindex="-1"></div>
  <div class="drawer__wrapper">
    <div class="drawer__header">
      <div class="drawer__title">
      Filters
      </div>
      <button class="drawer__close" data-drawer-close aria-label="Close Drawer"></button>
    </div>
    <div class="drawer__content">
      
        <form class="filter-form">
            {% for filter in collection.filters %}
                <div class="filterWrapper">
                    <div class="filter-title">
                        <span>{{ filter.label }}</span>
                        
                    </div>
                
                     
                          
                            <ul class="filter-group-display__list">
                                {% for filter_value in filter.values %}
                                    <li class="filter-list-item">
                                        <input onclick="event.preventDefault();this.closest('form').submit();" type="radio" name="{{ filter_value.param_name }}" id="filter-{{ filter_value.param_name }}-{{ forloop.index }}" value="{{ filter_value.value }}"{% if filter_value.active %} class="check-with-label" checked{% endif %}{% if filter_value.count == 0 and filter_value.active == false %} disabled{% endif %}>
                                        <span class="arrow {% if filter_value.active %}checked{% endif %} "><i class="fa fa-arrow-right"></i></span>
                                      <label class="label-for-check" for="filter-{{ filter_value.param_name }}-{{ forloop.index }}">{{ filter_value.label }}</label>
                                    </li>
                                {% endfor %}
                            </ul>
                            
                  
                </div>
            {% endfor %}
        </form>
    </div>
  </div>
</section>





<div class="collection_page_wrapper">
  <div class="collection_container">
    <div class="collection_item">
      <div class="collection_filter-container">
         
        <a class="filterwrap" href="#" data-drawer-trigger aria-controls="drawer-name" aria-expanded="false">
         <h2 class="filter-class">Filters</h2>
        </a>


        
        <form class="filter-form" id="bar-fixed">
            {% for filter in collection.filters %}
                <div class="filterWrapper">
                    <div class="filter-title">
                        <span>{{ filter.label }}</span>
                        
                    </div>
                
                     
                          
                            <ul class="filter-group-display__list">
                                {% for filter_value in filter.values %}
                                    <li class="filter-list-item">
                                        <input onclick="event.preventDefault();this.closest('form').submit();" type="radio" name="{{ filter_value.param_name }}" id="filter-{{ filter_value.param_name }}-{{ forloop.index }}" value="{{ filter_value.value }}"{% if filter_value.active %} class="check-with-label" checked{% endif %}{% if filter_value.count == 0 and filter_value.active == false %} disabled{% endif %}>
                                        <span class="arrow {% if filter_value.active %}checked{% endif %} "><i class="fa fa-arrow-right"></i></span>
                                      <label class="label-for-check" for="filter-{{ filter_value.param_name }}-{{ forloop.index }}">{{ filter_value.label }}</label>
                                    </li>
                                {% endfor %}
                            </ul>
                            
                  
                </div>
            {% endfor %}
        </form>
  
      </div>
      <div class="collection_product" >
          <div class="top-plus-minus">
            <span class="left"> +</span>
           <span class="right"> +</span>
         </div>
        <div class="collection_product_item">
          {% for product in collection.products %}
           {% include 'product-loop'%}          
          {% endfor %}
        </div>


        <div class="top-plus-minus">
            <span class="left-bottom"> +</span>
           <span class="right-bottom"> +</span>
          </div>
        
      </div>
    </div>
  </div>
</div>


<style>
#bar-fixed.stickIt {
  position: fixed;
  top: 20px;
}

  .collection_page_wrapper {
    padding: 30px 0 0;
}

.collection_page_wrapper .collection_container {
    max-width: 100%;
    margin: 0 auto;
    padding: 0 25px;
}
  
  span.arrow {
    color: #000;
    font-size: 13px;
    font-weight: 700;
    display: none;
}
 
.collection_page_wrapper .collection_container .collection_item .collection_product .collection_product_item {
    display: -ms-grid;
    display: grid;
    -ms-grid-columns: 1fr 1fr 1fr 1fr;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-gap: 20px;
    text-align: center;
}
.collection_page_wrapper .collection_container .collection_item .collection_product {
    padding: 0 20px 0px 30px;
}
li.filter-list-item {
    cursor: pointer;
    padding: 6px 0px;
    display: flex;
    align-items: center;
    gap: 8px;
}

 .filter-list-item{
     transition: .2s ease-in-out;
  }

.filter-list-item:hover .arrow {
display:block;
  
}

   input:checked + label .arrow {
display:block;
  
}
  
  
li.filter-list-item input {
    display: none;
}

li.filter-list-item label {
    cursor: pointer;
    font-size: 12px;
    line-height: 13px;
    color: #7e7676;
    text-transform: capitalize;
}

  
.filterWrapper {
    margin-bottom: 25px;
}
  

label {
    cursor: pointer;
}

ul.filter-group-display__list {
    margin-top: 13px;
}

.filter-title span {
    font-weight: 700;
    text-transform: capitalize;
    font-size: 15px;
}

.collection_product {
    position: relative;
}
span.left {
    font-weight: 500;
    float: left;
    top: -10px;
    font-size: 25px;
    left: 10px;
    display: block;
    position: absolute;
}

 

span.right {
    font-weight: 500;
    float: right;
    top: -10px;
    font-size: 25px;
    right: 2px;
    display: block;
    position: absolute;
}

.left-bottom {
    font-weight: 500;
    float: left;
    bottom: 30px;
    font-size: 25px;
    left: 10px;
    display: block;
    position: absolute;
}
.right-bottom {
    float: right;
    bottom: 30px;
    font-size: 25px;
    font-weight: 500;
    right: 1px;
    display: block;
    position: absolute;
}

input:checked + label {
  color: red;
}

span.arrow.checked {
    display: block;
}


h2.filter-class {
    color: #000;
    font-size: 18px;
    font-weight: 700;
    display: none;
}

  
@media only screen and (max-width:768px){


h2.filter-class {
    display: block;
}

 .collection_filter-container {
    margin-bottom: 20px;
    padding: 0 11px;
} 

.drawer__content .filter-form {
    display: block;
}
.drawer__title {
    color: #000;
    font-size: 25px;
    font-weight: 700;
}
  
  .collection_page_wrapper .collection_container {
    max-width: 98%;
    margin: 0 auto;
    padding: 0 0px;
}
   .collection_page_wrapper .collection_container .collection_item .collection_product {
    padding: 0 10px;
}

  
form.filter-form {
    display: none;
}
  

span.left {
    font-weight: 500;
    float: left;
    top: -10px;
    font-size: 22px;
    left: -4px;
    display: block;
    position: absolute;
}
  
span.right {
    font-weight: 500;
    float: right;
    top: -10px;
    font-size: 22px;
    right: -4px;
    display: block;
    position: absolute;
}
.left-bottom {
    font-weight: 500;
    float: left;
    bottom: 30px;
    font-size: 22px;
    left: -4px;
    display: block;
    position: absolute;
}


.right-bottom {
    float: right;
    bottom: 29px;
    font-size: 22px;
    font-weight: 500;
    right: -4px;
    display: block;
    position: absolute;
}
  
  
}







.drawer {
  display: none;
}

.drawer__header {
  padding: 1.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ddd;
}
.drawer__close {
  margin: 0;
  padding: 0;
  border: none;
  background-color: transparent;
  cursor: pointer;
  background-image: url("data:image/svg+xml,%0A%3Csvg width='15px' height='16px' viewBox='0 0 15 16' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Cg id='Page-1' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='2.-Menu' transform='translate(-15.000000, -13.000000)' stroke='%23000000'%3E%3Cg id='Group' transform='translate(15.000000, 13.521000)'%3E%3Cpath d='M0,0.479000129 L15,14.2971819' id='Path-3'%3E%3C/path%3E%3Cpath d='M0,14.7761821 L15,-1.24344979e-14' id='Path-3'%3E%3C/path%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
  width: 15px;
  height: 15px;
}
.drawer__wrapper {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  height: 100%;
  width: 100%;
  max-width: 500px;
  z-index: 9999;
  overflow: auto;
  transition: transform 0.3s;
  will-change: transform;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  -webkit-transform: translateX(103%);
  transform: translateX(103%); /* extra 3% because of box-shadow */
  -webkit-overflow-scrolling: touch; /* enables momentum scrolling in iOS overflow elements */
  box-shadow: 0 2px 6px #777;
}
.drawer__content {
  position: relative;
  overflow-x: hidden;
  overflow-y: auto;
  height: 100%;
  flex-grow: 1;
  padding: 1.5rem;
}
.drawer.is-active {
  display: block;
}
.drawer.is-visible .drawer__wrapper {
  -webkit-transform: translateX(0);
  transform: translateX(0);
}
.drawer.is-visible .drawer__overlay {
  opacity: 0.5;
}

 .drawer__overlay {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  z-index: 200;
  opacity: 0;
  transition: opacity 0.3s;
  will-change: opacity;
  background-color: #000;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
} 

.drawer--left .drawer__wrapper {
  left: 0;
  right: auto;
  -webkit-transform: translate3d(-100%, 0, 0);
  transform: translate3d(-100%, 0, 0);
}

  
</style>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>



<script>
var topLimit = $('#bar-fixed').offset().top;
$(window).scroll(function() {
  //console.log(topLimit <= $(window).scrollTop())
  if (topLimit <= $(window).scrollTop()) {
    $('#bar-fixed').addClass('stickIt')
  } else {
    $('#bar-fixed').removeClass('stickIt')
  }
})
</script>

<script>
  var drawer = function () {
    /**
    * Element.closest() polyfill
    * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
    */
    if (!Element.prototype.closest) {
      if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
      }
      Element.prototype.closest = function (s) {
        var el = this;
        var ancestor = this;
        if (!document.documentElement.contains(el)) return null;
        do {
          if (ancestor.matches(s)) return ancestor;
          ancestor = ancestor.parentElement;
        } while (ancestor !== null);
        return null;
      };
    }

    //
    // Settings
    //
    var settings = {
      speedOpen: 50,
      speedClose: 350,
      activeClass: 'is-active',
      visibleClass: 'is-visible',
      selectorTarget: '[data-drawer-target]',
      selectorTrigger: '[data-drawer-trigger]',
      selectorClose: '[data-drawer-close]',
    };

    //
    // Methods
    //
    // Toggle accessibility
    var toggleccessibility = function (event) {
      if (event.getAttribute('aria-expanded') === 'true') {
        event.setAttribute('aria-expanded', false);
      } else {
        event.setAttribute('aria-expanded', true);
      }
    };
    // Open Drawer
    var openDrawer = function (trigger) {
      // Find target
      var target = document.getElementById(trigger.getAttribute('aria-controls'));
      // Make it active
      target.classList.add(settings.activeClass);
      // Make body overflow hidden so it's not scrollable
      document.documentElement.style.overflow = 'hidden';
      // Toggle accessibility
      toggleccessibility(trigger);
      // Make it visible
      setTimeout(function () {
        target.classList.add(settings.visibleClass);
      }, settings.speedOpen);
    };
    // Close Drawer
    var closeDrawer = function (event) {
      // Find target
      var closestParent = event.closest(settings.selectorTarget),
        childrenTrigger = document.querySelector('[aria-controls="' + closestParent.id + '"');
      // Make it not visible
      closestParent.classList.remove(settings.visibleClass);
      // Remove body overflow hidden
      document.documentElement.style.overflow = '';
      // Toggle accessibility
      toggleccessibility(childrenTrigger);
      // Make it not active
      setTimeout(function () {
        closestParent.classList.remove(settings.activeClass);
      }, settings.speedClose);
    };
    // Click Handler
    var clickHandler = function (event) {
      // Find elements
      var toggle = event.target,
        open = toggle.closest(settings.selectorTrigger),
        close = toggle.closest(settings.selectorClose);
      // Open drawer when the open button is clicked
      if (open) {
        openDrawer(open);
      }
      // Close drawer when the close button (or overlay area) is clicked
      if (close) {
        closeDrawer(close);
      }
      // Prevent default link behavior
      if (open || close) {
        event.preventDefault();
      }
    };
    // Keydown Handler, handle Escape button
    var keydownHandler = function (event) {
      if (event.key === 'Escape' || event.keyCode === 27) {
        // Find all possible drawers
        var drawers = document.querySelectorAll(settings.selectorTarget),
          i;
        // Find active drawers and close them when escape is clicked
        for (i = 0; i < drawers.length; ++i) {
          if (drawers[i].classList.contains(settings.activeClass)) {
            closeDrawer(drawers[i]);
          }
        }
      }
    };

    //
    // Inits & Event Listeners
    //
    document.addEventListener('click', clickHandler, false);
    document.addEventListener('keydown', keydownHandler, false);

};
drawer();
</script>


